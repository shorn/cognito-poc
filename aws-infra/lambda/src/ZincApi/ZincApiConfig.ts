import { CognitoConfig } from "Shared/ApiTypes";
import { JwtRsaVerifierSingleIssuer } from "aws-jwt-verify/jwt-rsa";
import { formatCognitoIdpUrl } from "AuthnApi/Cognito";
import { JwtRsaVerifier } from "aws-jwt-verify";
import { readJsonParam } from "Util/Ssm";
import {
  RsaVerifierProps,
} from "ZincApi/ZincApiHandler";
import { z as zod } from "zod";
import { forceError } from "Util/Error";

/** This is extra config that is needed to validate the tokens generated by
 * our  Github-Oidc shim, since it works differently from the normal Cognito
 * stuff.
 */
export const ZincGithubOidcConfig = zod.object({
  functionUrl: zod.string().url(),
  clientSecret: zod.string(),
});

export const ZincApiConfig = zod.object({
  authzSecrets: zod.string().array().nonempty(),
  cognito: CognitoConfig,
  githubOidc: ZincGithubOidcConfig,
});
export type ZincApiConfig = zod.infer<typeof ZincApiConfig>;

export function createCognitoJwtRsaVerifier({region, userPoolId, userPoolClientId}: {
  region: string,
  userPoolId: string,
  userPoolClientId: string,
}): JwtRsaVerifierSingleIssuer<RsaVerifierProps> {
  const issuer: string = formatCognitoIdpUrl({region, userPoolId});

  return JwtRsaVerifier.create({
    issuer,
    audience: userPoolClientId,
    jwksUri: `${issuer}/.well-known/jwks.json`,
  });
}

export async function readZincApiConfigFromSsm(
  paramName: string|undefined
): Promise<ZincApiConfig|Error>{
  try {
    const paramValue = await readJsonParam(paramName);
    return ZincApiConfig.parse(paramValue);
  }
  catch( err ){
    console.log(`problem parsing lambda config from ${paramName}`,
      zincApiSsmConfigHelp,
      zincApiSsmConfigExample );
    return forceError(err);
  }
}


export const zincApiSsmConfigHelp = `
ZincApiSsmConfig:
* authzSecrets: string[]
  * suitable values for Hs256 signatures, 128 bits of entropy 
  (i.e. use Keepass or similar to generate)
  * first value will always be used for signing, but all values will be checked
  when verifying (to support zero-downtime rotation of secrets)
* githubOidc: ZincGithubOidcConfig
  * clientSecret  - from the Github OAuth client settings, also same value as
  the Cognito client secret
  * functionUrl - address of the CognitoGithubOidcApiHandler lambda, created by
  LambdaGithubOidcApiStack.ts
* cognito
  * region: string 
    * the AWS region where all the cognito user pools are created
  * email: CognitoEmailConfig
    * take the values from the userpool  
  * google: CognitoUserPoolConfig 
    * take the values from the userpool  
  * github: CognitoUserPoolConfig        
    * take the values from the userpool  
Example:
`;
export const zincApiSsmConfigExample : ZincApiConfig = {
  authzSecrets: ["xxxx"],
  githubOidc: {
    clientSecret: "do not set in code",
    functionUrl: "https://xxx.lambda-url.ap-southeast-2.on.aws",
  },
  cognito: {
    region: "ap-southeast-2",
    email: {
      userPoolId: "xxx",
      userPoolClientId: "xxx",
    },
    google: {
      userPoolId: "xxx",
      userPoolClientId: "xxx",
      userPoolDomain: "zinc-google-au"
    },
    github: {
      userPoolId: "xxx",
      userPoolClientId: "xxx",
      userPoolDomain: "zinc-github-au"
    },
  }
}

//export interface LambaApiV2Config {
//  cognito: CognitoConfig,
//  directAuthn: {
//    github: {
//      functionUrl: string,
//      clientId: string,
//      clientSecret: string,
//    },
//    // might not be needed
//    google: {
//      functionUrl: string,
//      clientId: string,
//      clientSecret: string,
//    },
//  }
//  verifier: {
//    // "MultiIssuer" might be better, but this seems simpler right now
//    google: JwtRsaVerifierSingleIssuer<CognitoVerifierProps>,
//    email: JwtRsaVerifierSingleIssuer<CognitoVerifierProps>,
//    github: JwtRsaVerifierSingleIssuer<CognitoVerifierProps>,
//    googleDirect: JwtRsaVerifierSingleIssuer<CognitoVerifierProps>,
//  },
//  authzSecrets: string[],
//  authzSigningSecret: string,
//  database: UserTableV1Db,
//  apiPathPrefix: string,
//}
//const cognitoRegion = readStringParam(
//  process.env.COGNITO_REGION_SSM_PARAM);
//const googleUserPoolId = readStringParam(
//  process.env.COGNITO_GOOGLE_USER_POOL_ID_SSM_PARAM);
//const googleUserPoolDomain = readStringParam(
//  process.env.COGNITO_GOOGLE_USER_POOL_DOMAIN_SSM_PARAM);
//const googleClientId = readStringParam(
//  process.env.COGNITO_GOOGLE_USER_POOL_CLIENT_ID_SSM_PARAM);
//const emailUserPoolId = readStringParam(
//  process.env.COGNITO_EMAIL_USER_POOL_ID_SSM_PARAM);
//const emailClientId = readStringParam(
//  process.env.COGNITO_EMAIL_USER_POOL_CLIENT_ID_SSM_PARAM);
//
//const cognitoGithubUserPoolDomain = readStringParam(
//  process.env.COGNITO_GITHUB_USER_POOL_DOMAIN_SSM_PARAM);
//const cognitoGithubUserPoolId = readStringParam(
//  process.env.COGNITO_GITHUB_USER_POOL_ID_SSM_PARAM);
//const cognitoGithubClientId = readStringParam(
//  process.env.COGNITO_GITHUB_USER_POOL_CLIENT_ID_SSM_PARAM);
//
//const zincGithubClientId = readStringParam(
//  process.env.ZINC_GITHUB_CLIENT_ID_SSM_PARAM);
//const zincGithubClientSecret = readStringParam(
//  process.env.ZINC_GITHUB_CLIENT_SECRET_SSM_PARAM);
//const zincGithubAuthnFunctionUrl = readStringParam(
//  process.env.ZINC_GITHUB_AUTHN_FUNCTION_URL_SSM_PARAM);
//
//const zincGoogleParam = await readJsonParam(
//  process.env.GOOGLE_CLIENT_OAUTH_CONFIG_SSM_PARAM);
//const zincGoogleConfig = OAuthClientConfig.parse(zincGoogleParam);
//
//const authzSecretsSsmParam = readStringListParam(
//  process.env.AUTHZ_SECRETS_SSM_PARAM );
